import tensorflow as tf
import numpy as np
import logging

def read_strings_from_file(file_path):
    """Reads a list of strings from a file and stores them in an array."""
    try:
        with open(file_path, 'r') as file:
            string_list = [line.strip() for line in file.readlines()]
        return string_list
    except FileNotFoundError:
        print(f"Error: The file '{file_path}' does not exist.")
        return []
    except Exception as e:
        print(f"An error occurred: {e}")
        return []

def load_tflite_model(model_path):
    """Loads the TensorFlow Lite model."""
    try:
        interpreter = tf.lite.Interpreter(model_path=model_path)
        interpreter.allocate_tensors()
        print("Model loaded successfully.")
        return interpreter
    except Exception as e:
        print(f"Failed to load model: {e}")
        return None

def print_model_details(interpreter):
    """Prints the input and output tensor details of the TFLite model."""
    input_details = interpreter.get_input_details()
    output_details = interpreter.get_output_details()
    print("Input details:", input_details)
    print("Output details:", output_details)

def test_inference(interpreter):
    """Runs inference on dummy data and logs the results."""
    input_details = interpreter.get_input_details()
    output_details = interpreter.get_output_details()

    # Generate test data
    # Barbell and bench_press are actual key points generated by the model which are then reshaped to act as test data
    barbell = [236,82,0.8111062,244,74,0.7215965,233,74,0.6291307,262,73,0.8494792,238,75,0.50598395,282,115,0.86100006,227,116,0.82396984,273,171,0.49851522,211,166,0.7925267,261,117,0.5322299,199,120,0.5951015,261,233,0.8032272,230,234,0.79085076,258,319,0.8160537,229,308,0.86345875,269,362,0.11586296,238,362,0.4002922]
    barbell_input_data = np.array(barbell, dtype=np.float32).reshape(1, 51)
    bench_press = [230,120,0.28258467,226,118,0.36080953,225,119,0.30656222,232,115,0.390921,225,119,0.42750347,272,115,0.5700047,228,131,0.695276,307,142,0.57319295,224,182,0.80787504,316,117,0.9137856,221,131,0.8032002,310,145,0.829933,282,154,0.5988549,383,172,0.90837693,293,195,0.78354126,356,246,0.6924002,282,267,0.8868269]
    bench_press_input_data = np.array(bench_press, dtype=np.float32).reshape(1, 51)
    input_shape = input_details[0]['shape']
    dummy_input = np.random.random_sample(input_shape).astype(np.float32)

    print("Length of Dummy Input: " + str(len(dummy_input[0])))
    print("Length of barbell input: " + str(len(barbell)))

    interpreter.set_tensor(input_details[0]['index'], bench_press_input_data)
    interpreter.invoke()
    output_data = interpreter.get_tensor(output_details[0]['index'])

    # Print the results
    print("Dummy input data:", dummy_input)
    print("Model output:", output_data)

    pose_file_path = "pose_labels.txt"
    class_names = read_strings_from_file(pose_file_path)
    predicted_class = np.argmax(output_data)
    print(f"Predicted class: {class_names[predicted_class]} (Confidence: {output_data[0][predicted_class]:.2f})")

def main():
    model_path = "pose_classifier.tflite" 
    interpreter = load_tflite_model(model_path)

    if interpreter:
        print_model_details(interpreter)
        test_inference(interpreter)
    else:
        print("Model could not be loaded. Please check the path and try again.")

if __name__ == "__main__":
    main()
